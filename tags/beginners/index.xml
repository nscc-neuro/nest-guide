<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beginners on NEST 集群部署文档</title>
    <link>https://nscc-neuro.github.io/nest-guide/tags/beginners/</link>
    <description>Recent content in Beginners on NEST 集群部署文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Oct 2023 08:59:26 +0000</lastBuildDate><atom:link href="https://nscc-neuro.github.io/nest-guide/tags/beginners/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NEST 集群版部署记录</title>
      <link>https://nscc-neuro.github.io/nest-guide/docs/oztm79xgq93290rc/</link>
      <pubDate>Tue, 19 Sep 2023 07:47:45 +0000</pubDate>
      
      <guid>https://nscc-neuro.github.io/nest-guide/docs/oztm79xgq93290rc/</guid>
      <description>1. 设置内网 VPN link从 Hillstone Secure Connect 下载最新版的支持 SSL VPN 功能的客户端。
输入 VPN 账号、密码和对应的 VPN 地址，登录后即可访问内网集群资源。
2. 登录集群 linkMac用户首先将秘钥文件放到.ssh文件夹内，并在.ssh文件夹内的config文件中添加如下信息：
Host SelfDefineName HostName 172.16.20.102 IdentityFile Path/to/Private_key User Username 在登录内网VPN的前提下，可在终端输入命令ssh SelfDefineName测试集群连接是否成功，或直接使用vscode连接集群。注意：连接集群必须使用VPN。
3. 设置外网代理 link在环境变量中配置：
export http_proxy=http://10.20.18.21:3128 export HTTP_PROXY=http://10.20.18.21:3128 export https_proxy=http://10.20.18.21:3128 export HTTPS_PROXY=http://10.20.18.21:3128 export no_proxy=&amp;#34;localhost,127.0.0.1&amp;#34; 在命令行配置：
git config --global http.proxy http://10.20.18.21:3128 git config --global https.proxy http://10.20.18.21:3128 4. 安装 Miniconda3 link从 Miniconda3 官方网站 下载 Miniconda3。
执行 Miniconda3-py39_23.5.2-0-Linux-x86_64.sh ，按照提示安装 Miniconda3。（我安装在software目录下）
5. 安装 Boost link从 Boost 官方网站 下载 Boost。</description>
    </item>
    
    <item>
      <title>th2k 超算使用教程</title>
      <link>https://nscc-neuro.github.io/nest-guide/docs/cg68ylfgx0u7dmfg/</link>
      <pubDate>Tue, 19 Sep 2023 10:21:04 +0000</pubDate>
      
      <guid>https://nscc-neuro.github.io/nest-guide/docs/cg68ylfgx0u7dmfg/</guid>
      <description>快速入门 link在获取上机账号后， Linux\Mac 用户可通过命令行登录集群， Windows 用户则可以通过 ssh 客户端登录集群；登录集群后，编写作业脚本，并通过 sbatch 指令将作业提交到计算节点上执行；此外，集群上安装了常见的计算软件，通过module 指令导入计算环境。
先登录集群**，**登录前确保网络环境为内网 VPN
Linux\Mac 用户直接使用系统自带的终端通过ssh命令登录：
ssh user_name@ip_address -i /path/to/private_key Window 用户可使用Xshell客户端进行登陆。下载Xshell，选择免费许可版，为了方便文件传输，可同时下载并安装 Xftp，安装完后点击软件左上角新建连接，输入IP和用户名，选择私钥文件即可登录；
登录后，编写作业脚本，并通过sbatch命令将作业提交到计算节点上执行。
假设我们的计算过程为：在计算节点上运行 hostname 指令，那么就可以这么编写作业脚本；
#!/bin/bash #SBATCH -o job.%j.out #SBATCH --partition=gpu_v100 #SBATCH -J myFirstJob #SBATCH --nodes=1 #SBATCH --ntasks-per-node=1 hostname 假设上面作业脚本的文件名为job.sh，通过以下命令提交：
sbatch job.sh 集群安装了常见的计算软件，可以通过module指令导入计算环境； 可以通过module加载平台上装有的软件环境，也可以自行安装配置需要的计算环境，下面的作业脚本加载了intel_parallel_studio/2017.1的软件环境，具体可用的软件环境可使用命令 module avail 指令进行查看。
#!/bin/bash #SBATCH -o job.%j.out #SBATCH --partition=C032M0128G #SBATCH -J myFirstJob #SBATCH --nodes=1 #SBATCH --ntasks-per-node=2 module purge module load intel_parallel_studio/2017.1 mpirun -n 2 hostname 连接集群 linkVPN 连接方式 link从 Hillstone Secure Connect 下载最新版的支持 SSL VPN 功能的客户端，并使用 VPN 用户名与密码即可登录 VPN。</description>
    </item>
    
    <item>
      <title>远程连接集群（Slurm）上的 jupyter lab</title>
      <link>https://nscc-neuro.github.io/nest-guide/docs/fqy4b2b061msp8gr/</link>
      <pubDate>Wed, 11 Oct 2023 09:11:59 +0000</pubDate>
      
      <guid>https://nscc-neuro.github.io/nest-guide/docs/fqy4b2b061msp8gr/</guid>
      <description>安装 jupyter lab link首先，下载并安装Miniconda。可以从Miniconda的官方网站（https://docs.conda.io/en/latest/miniconda.html）下载。 安装完成后，打开终端，创建一个新的 conda 环境，可以使用以下命令：
conda create -n jupyter python=3.10 然后，激活新创建的环境
source activate jupyter 在激活的环境中，使用如下的命令安装 jupyter lab
conda install -c conda-forge jupyterlab 启动 jupyter lab link安装完成后，在计算节点（比如 gpu_v100分区下的gpu22节点) 上启动jupyter
jupyter-lab --no-browser --port=8014 --ip=127.0.0.1 启动后如下： 以上启动完毕。
建立隧道 link在本地电脑cmd输入如下代码，建立隧道。
ssh -t -t nsccgz_zgchen_2@172.16.20.102 -L 8014:localhost:8014 ssh 89.72.32.22 -L 8014:127.0.0.1:8014 这里 nsccgz_zgchen_2 是中间登录节点的用户名，172.16.20.102是中间登录节点的IP， 89.72.32.22是计算节点的IP，8014是port号可以换成你自己喜欢的数字。 计算节点的ip一般是不知道的，可以通过如下方式获得：
cat /etc/hosts | grep node/to/search 即可看到计算节点对应的IP。 建立隧道完成后，在本地浏览器输入如下代码，即可成功访问。
https://127.0.0.1:8014 然后你就可以流畅地在上面使用 python 编写交互式程序了。</description>
    </item>
    
    <item>
      <title>Neuron 8.2.3 部署记录</title>
      <link>https://nscc-neuro.github.io/nest-guide/docs/gpu1kvy7kivvlzps/</link>
      <pubDate>Fri, 13 Oct 2023 08:59:26 +0000</pubDate>
      
      <guid>https://nscc-neuro.github.io/nest-guide/docs/gpu1kvy7kivvlzps/</guid>
      <description>安装所需依赖项 link为了从源代码构建 Neuron-8.2.3，需要提供以下程序包：
Bison Flex &amp;gt;= 2.6 C/C++ compiler suite supporting C++17 (e.g. GCC &amp;gt;=9.3.1, Clang &amp;gt;= 11.0.0) 注意，C++17的某些功能需要较新的编译器版本。 C++17功能必须在不链接额外库的情况下可用。这特别排除了一些旧版本的GCC，其中std::FileSystem需要libstdc++fs.so。 CMake &amp;gt;= 3.15 (&amp;gt;= 3.18 if -DNRN_ENABLE_PYTHON_DYNAMIC=ON) Python &amp;gt;=3.8 (for Python interface) Cython &amp;lt; 3 (for RXD) MPI (for parallel) X11 (for GUI) 我选择的环境是：
gcc 11.2.0 CMake 3.27.7-gcc-11.2.0 Cython 0.29.36 MPI openmpi 4.1.6-gcc-11.2.0 Python 3.10.12 加载代理网络环境 link加载代理网络环境的脚本如下，如果你没有的话建议创建一个
export http_proxy=http://10.20.18.21:3128 export HTTP_PROXY=http://10.20.18.21:3128 export https_proxy=http://10.20.18.21:3128 export HTTPS_PROXY=http://10.20.18.21:3128 git config --global http.proxy http://10.20.18.21:3128 git config --global https.</description>
    </item>
    
  </channel>
</rss>
